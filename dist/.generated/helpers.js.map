"{\"version\":3,\"sources\":[\"/home/lil/fi/POWs/prismary/dist/.generated/helpers.ts\"],\"sourcesContent\":[\"import { z } from \\\"zod\\\";\\nimport { Prisma } from \\\"@prisma/client\\\";\\n\\n\\n// Types and Zod schemas helpers\\n\\n// - for JSON fields\\nexport type Literal = boolean | number | string;\\nexport type Json = Literal | { [key: string]: Json; } | Json[];\\nexport const literalSchema = z.union([z.string(), z.number(), z.boolean()]);\\nexport const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]));\\n\\n// - for Decimal fields\\nexport const decimalSchema = z\\n  // Accept native Prisma.Decimal objects, string or number\\n  .instanceof(Prisma.Decimal)\\n  .or(z.string())\\n  .or(z.number())\\n  // Ensure the value can be converted to Prisma.Decimal instance\\n  .refine((value) => {\\n    try {\\n      return new Prisma.Decimal(value);\\n    } catch (error) {\\n      return false;\\n    }\\n  })\\n  // Finally, ensure the value is a Prisma.Decimal instance\\n  .transform((value) => new Prisma.Decimal(value));\\n\"],\"names\":[\"literalSchema\",\"jsonSchema\",\"decimalSchema\",\"z\",\"union\",\"string\",\"number\",\"boolean\",\"lazy\",\"array\",\"record\",\"instanceof\",\"Prisma\",\"Decimal\",\"or\",\"refine\",\"value\",\"error\",\"transform\"],\"mappings\":\";;;;;;;;;;;IASaA,aAAa;eAAbA;;IACAC,UAAU;eAAVA;;IAGAC,aAAa;eAAbA;;;qBAbK;wBACK;AAQhB,MAAMF,gBAAgBG,MAAC,CAACC,KAAK,CAAC;IAACD,MAAC,CAACE,MAAM;IAAIF,MAAC,CAACG,MAAM;IAAIH,MAAC,CAACI,OAAO;CAAG;AACnE,MAAMN,aAAgCE,MAAC,CAACK,IAAI,CAAC,IAAML,MAAC,CAACC,KAAK,CAAC;QAACJ;QAAeG,MAAC,CAACM,KAAK,CAACR;QAAaE,MAAC,CAACO,MAAM,CAACT;KAAY;AAGrH,MAAMC,gBAAgBC,MAAC,AAC5B,yDAAyD;CACxDQ,UAAU,CAACC,cAAM,CAACC,OAAO,EACzBC,EAAE,CAACX,MAAC,CAACE,MAAM,IACXS,EAAE,CAACX,MAAC,CAACG,MAAM,GACZ,+DAA+D;CAC9DS,MAAM,CAAC,CAACC,QAAU;IACjB,IAAI;QACF,OAAO,IAAIJ,cAAM,CAACC,OAAO,CAACG;IAC5B,EAAE,OAAOC,OAAO;QACd,OAAO,KAAK;IACd;AACF,EACA,yDAAyD;CACxDC,SAAS,CAAC,CAACF,QAAU,IAAIJ,cAAM,CAACC,OAAO,CAACG\"}"