"{\"version\":3,\"sources\":[\"/home/lil/fi/POWs/prismary/dist/.generated/PostProcedures.ts\"],\"sourcesContent\":[\"import { z } from 'zod';\\nimport { initTRPC, TRPCError } from \\\"@trpc/server\\\";\\nimport { PrismaClient } from '@prisma/client';\\nimport { PureAbility, subject } from '@casl/ability';\\nimport { PrismaQuery } from '@casl/prisma';\\n//@ts-ignore\\nimport { TRPC_INSTANCE_NAME } from \\\"TRPC_INSTANCE_PATH\\\";\\nconst t: ReturnType<typeof initTRPC.create> = TRPC_INSTANCE_NAME;\\nconst publicProcedure = t.procedure;\\n\\n//@ts-ignore\\nimport { PRISMA_INSTANCE_NAME } from \\\"PRISMA_INSTANCE_PATH\\\";\\nconst prisma: PrismaClient = PRISMA_INSTANCE_NAME;\\n\\n//@ts-ignore\\nimport { CASL_INSTANCE_NAME } from \\\"CASL_INSTANCE_PATH\\\";\\ntype AppAbility = PureAbility<[string, any], PrismaQuery>;\\nconst ability: AppAbility = CASL_INSTANCE_NAME;\\n\\n//@ts-ignore\\nimport { CREATE_MODEL_SCHEMA, UPDATE_MODEL_SCHEMA } from 'MODEL_SCHEMAS_PATH';\\nconst createModelSchema: ReturnType<typeof z.object> = CREATE_MODEL_SCHEMA;\\nconst updateModelSchema: ReturnType<typeof z.object> = UPDATE_MODEL_SCHEMA;\\n\\nconst forbiddenError = new TRPCError({\\n  code: \\\"FORBIDDEN\\\",\\n  message: \\\"You don't have access to this ressource.\\\"\\n});\\n\\nconst missingError = new TRPCError({\\n  code: \\\"NOT_FOUND\\\",\\n  message: \\\"This resource doesn't exist.\\\"\\n});\\n\\nconst notSupportedError = (feature: string) => new TRPCError({\\n  code: \\\"METHOD_NOT_SUPPORTED\\\",\\n  message: `\\\"${feature}\\\" is not supported yet by Prismary.`\\n});\\n\\n// The whole Prisma Client API reference is here: https://www.prisma.io/docs/reference/api-reference/prisma-client-reference\\n\\nexport const userProcedures = {\\n  create: publicProcedure\\n    .input((val: any) => {\\n      createModelSchema.parse(val.data);\\n      return val as Parameters<typeof prisma.placeholder.create>[0];\\n    })\\n    .mutation(async ({ input }) => {\\n      // TODO: Check for nested \\\"create\\\" and \\\"createMany\\\" statements (see: https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#create-a-related-record)\\n      // BTW: I haven't understood the difference between create and createMany as they both seems to allow creating many rows\\n      // To do so, loop over relations fields and search if they contain create or createMany statements\\n      // There is also the connectOrCreate statement (see: https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#connect-or-create-a-record)\\n\\n      // TODO: properly check for \\\"include\\\" statment\\n      if (input.include) throw notSupportedError(\\\"include\\\");\\n\\n      // If the user can create SOME users\\n      if (ability.can(\\\"create\\\", \\\"User\\\")) return await prisma.placeholder.create(input);\\n      throw forbiddenError;\\n    }),\\n  createMany: publicProcedure\\n    .input((val: any) => {\\n      z.array(createModelSchema).parse(val.data);\\n      return val as Parameters<typeof prisma.placeholder.createMany>[0];\\n    })\\n    .mutation(async ({ input }) => {\\n      // Security note: Nested \\\"create\\\" and \\\"createMany\\\" statements are not checked because not supported with createMany\\n      // (see: https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#create-multiple-records-and-multiple-related-records)\\n\\n      // If the user can create SOME users\\n      if (ability.can(\\\"create\\\", \\\"User\\\")) return await prisma.placeholder.createMany(input);\\n      throw forbiddenError;\\n    }),\\n\\n  // TODO: In find methods checks for \\\"Relations filters\\\" (some, every, none) which could lead to attacker\\n  // being able to infer some data by testing them (see: https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#relation-filters)\\n  // TODO: Same thing for \\\"is\\\" and \\\"isNot\\\" statements (see: https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#filter-on--to-one-relations)\\n  findUnique: publicProcedure\\n    .input((val: any) => val as Parameters<typeof prisma.placeholder.findUnique>[0])\\n    .query(async ({ input }) => {\\n      // TODO: properly check for \\\"include\\\" statment\\n      if (input.include) throw notSupportedError(\\\"include\\\");\\n      // TODO: properly check for \\\"include\\\" statment\\n      if (input.select) throw notSupportedError(\\\"select\\\");\\n\\n      // If the user can read SOME users\\n      if (ability.can(\\\"read\\\", \\\"User\\\")) {\\n        const user = await prisma.placeholder.findUnique(input);\\n        if (!user) throw missingError;\\n        // If the user can read THIS user\\n        if (ability.can(\\\"read\\\", subject(\\\"User\\\", user))) return user;\\n      }\\n      throw forbiddenError;\\n    }),\\n  findMany: publicProcedure\\n    .input((val: any) => val as Parameters<typeof prisma.placeholder.findMany>[0])\\n    .query(async ({ input }) => {\\n      // TODO: properly check for \\\"include\\\" statment\\n      if (input && input.include) throw notSupportedError(\\\"include\\\");\\n      // TODO: properly check for \\\"include\\\" statment\\n      if (input && input.select) throw notSupportedError(\\\"select\\\");\\n\\n      // If the user can read SOME users\\n      if (ability.can(\\\"read\\\", \\\"User\\\")) {\\n        const users = await prisma.placeholder.findMany(input);\\n        if (!users.length) throw missingError;\\n        // If the user can read THOSE users\\n        for (const user of users) {\\n          if (!ability.can(\\\"read\\\", subject(\\\"User\\\", user))) throw forbiddenError;\\n        }\\n        return users;\\n      }\\n      throw forbiddenError;\\n    }),\\n\\n  update: publicProcedure\\n    .input((val: any) => {\\n      updateModelSchema.parse(val.data);\\n      return val as Parameters<typeof prisma.placeholder.update>[0];\\n    })\\n    .mutation(async ({ input }) => {\\n      // TODO: Check for deleteManystatement (see: https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#delete-all-related-records)\\n      // TODO: Check for nested \\\"update\\\" and \\\"updateMany\\\" statements (see: https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#update-all-related-records-or-filter)\\n      // TODO: Check for nested \\\"upsert\\\" statements (see: https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#update-or-create-a-related-record)\\n      // TODO: Check for nested \\\"createMany\\\" statements (see: https://www.prisma.io/docs/concepts/components/prisma-client/relation-queries#update-or-create-a-related-record)\\n\\n      // If the user can update SOME users\\n      if (ability.can(\\\"update\\\", \\\"User\\\")) {\\n        const findUniqueInput = { ...input } as any;\\n        delete findUniqueInput.data;\\n        const user = await prisma.placeholder.findUnique(findUniqueInput as Parameters<typeof prisma.placeholder.findUnique>[0]);\\n        if (!user) throw missingError;\\n        // If the user can update THIS user\\n        if (ability.can(\\\"update\\\", subject(\\\"User\\\", user))) return await prisma.placeholder.update(input);\\n      }\\n      throw forbiddenError;\\n    }),\\n  updateMany: publicProcedure\\n    .input((val: any) => {\\n      z.array(updateModelSchema).parse(val.data);\\n      return val as Parameters<typeof prisma.placeholder.updateMany>[0];\\n    })\\n    .mutation(async ({ input }) => {\\n      // If the user can update SOME users\\n      if (ability.can(\\\"update\\\", \\\"User\\\")) {\\n        const findManyInput = { ...input } as any;\\n        delete findManyInput.data;\\n\\n        const users = await prisma.placeholder.findMany(findManyInput as Parameters<typeof prisma.placeholder.findMany>[0]);\\n        if (!users.length) throw missingError;\\n\\n        // If the user can update THOSE users\\n        for (const user of users) {\\n          if (!ability.can(\\\"update\\\", subject(\\\"User\\\", user))) throw forbiddenError;\\n        }\\n        return await prisma.placeholder.updateMany(input);\\n      }\\n      throw forbiddenError;\\n    }),\\n\\n  delete: publicProcedure\\n    .input((val: any) => val as Parameters<typeof prisma.placeholder.delete>[0])\\n    .mutation(async ({ input }) => {\\n      // If the user can delete SOME users\\n      if (ability.can(\\\"delete\\\", \\\"User\\\")) {\\n        const findUniqueInput = { ...input } as Parameters<typeof prisma.placeholder.findUnique>[0];\\n        const user = await prisma.placeholder.findUnique(findUniqueInput);\\n        if (!user) throw missingError;\\n\\n        // If the user can delete THIS user\\n        if (ability.can(\\\"delete\\\", subject(\\\"User\\\", user))) return await prisma.placeholder.delete(input);\\n      }\\n      throw forbiddenError;\\n    }),\\n  deleteMany: publicProcedure\\n    .input((val: any) => val as Parameters<typeof prisma.placeholder.deleteMany>[0])\\n    .mutation(async ({ input }) => {\\n      // If the user can delete SOME users\\n      if (ability.can(\\\"delete\\\", \\\"User\\\")) {\\n        const findManyInput = { ...input } as Parameters<typeof prisma.placeholder.findMany>[0];\\n        const users = await prisma.placeholder.findMany(findManyInput);\\n        if (!users.length) throw missingError;\\n\\n        // If the user can delete THOSE users\\n        for (const user of users) {\\n          if (!ability.can(\\\"delete\\\", subject(\\\"User\\\", user))) throw forbiddenError;\\n        }\\n        return await prisma.placeholder.deleteMany(input);\\n      }\\n      throw forbiddenError;\\n    }),\\n};\\n\"],\"names\":[\"userProcedures\",\"t\",\"TRPC_INSTANCE_NAME\",\"publicProcedure\",\"procedure\",\"prisma\",\"PRISMA_INSTANCE_NAME\",\"ability\",\"CASL_INSTANCE_NAME\",\"createModelSchema\",\"CREATE_MODEL_SCHEMA\",\"updateModelSchema\",\"UPDATE_MODEL_SCHEMA\",\"forbiddenError\",\"TRPCError\",\"code\",\"message\",\"missingError\",\"notSupportedError\",\"feature\",\"create\",\"input\",\"val\",\"parse\",\"data\",\"mutation\",\"include\",\"can\",\"placeholder\",\"createMany\",\"z\",\"array\",\"findUnique\",\"query\",\"select\",\"user\",\"subject\",\"findMany\",\"users\",\"length\",\"update\",\"findUniqueInput\",\"updateMany\",\"findManyInput\",\"delete\",\"deleteMany\"],\"mappings\":\"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\"}"